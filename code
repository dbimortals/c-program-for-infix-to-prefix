#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define n 100
int top = -1;
char a[n];
void push(char x) 
{
    a[++top] = x;
}
char pop() {
    if (top == -1)
        return -1;
    else
        return a[top--];
}
int prcd(char c) {
    if (c == '(' || c == ')')
        return 0;
    else if (c == '+' || c == '-')
        return 1;
    else if (c == '*' || c == '/')
        return 2;
    return -1;
}
void reverse(char *str) 
{
    int length = strlen(str);
    for (int i = 0; i < length / 2; i++) 
    {
        char temp = str[i];
        str[i] = str[length - i - 1];
        str[length - i - 1] = temp;
    }
}
void infixtoprefix(char infix[n], char prefix[n]) 
{
    char temp, x;
    int i = 0, j = 0;
    reverse(infix);
    while (infix[i] != '\0') 
    {
        temp = infix[i];
        if (isalnum(temp)) 
        {
            prefix[j++] = temp;
        } else if (temp == ')') 
        {
            push(temp);
        }
        else if (temp == '(') 
        {
            while ((x = pop()) != ')') {
                prefix[j++] = x;
            }
        }
        else 
        {
            while (top != -1 && prcd(a[top]) >= prcd(temp)) {
                prefix[j++] = pop();
            }
            push(temp);
        }
        i++;
    }
    while (top != -1) 
    {
        prefix[j++] = pop();
    }
    prefix[j] = '\0';
    reverse(prefix);
}
int main() 
{
    char infix[n], prefix[n];
    printf("Enter the infix expression\n");
    fgets(infix, sizeof(infix), stdin);
    infix[strcspn(infix, "\n")] = '\0'; 
    printf("The infix expression is %s\n", infix);
    infixtoprefix(infix, prefix);
    printf("The prefix expression is %s\n", prefix);
    return 0;
}
